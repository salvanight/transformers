[build-system]
requires = ["maturin>=1.0,<2.0"]
build-backend = "maturin"

[project]
name = "tensor_ops_rs_py" # This is what Python will import
version = "0.1.0"
description = "A Python package with Rust extensions for tensor operations."
classifiers = [
    "Programming Language :: Rust",
    "Programming Language :: Python :: Implementation :: CPython",
    "License :: OSI Approved :: MIT License", # Example, choose your license
    "Operating System :: OS Independent",
]
# Optional: Add more metadata like authors, readme, license file, etc.
# authors = [{name = "Your Name", email = "your@email.com"}]
# readme = "README.md" # Path to your README file

[tool.maturin]
# This points to the Cargo.toml of the crate that produces the Python module.
# Essential for projects where the pyproject.toml is not in the same directory as the Rust crate's Cargo.toml,
# or when using a workspace.
manifest-path = "rust_crates/tensor_ops_rs/Cargo.toml"

# The `features` array allows you to enable specific features in your Rust crate.
# `pyo3/extension-module` is typically needed for PyO3.
features = ["pyo3/extension-module"]

# Optional: If your Python code is in py_src, you might declare it as a package.
# This tells maturin to also include Python files from py_src in the wheel.
# [tool.maturin.bindings.pyo3] # This section is if you use experimental pyo3 bindings directly
# Instead, for general Python source, you declare it as a package:
# We will handle Python packaging separately if `py_src` is meant to be part of the same distributable package.
# For now, this pyproject.toml is focused on building the Rust extension `tensor_ops_rs_py`.
# If `py_src` is the main Python application that *uses* this Rust extension,
# it might have its own pyproject.toml or be managed differently.
# Assuming `tensor_ops_rs_py` is the primary distributable module built here.
